'use strict';

/**
Константы и глобальные переменные
 **/
var days = ['monday', 'tuesday', 'tednesday', 'thursday', 'friday', 'saturday', 'sunday'];
var fullDays = ['fullMonday', 'fullTuesday', 'fullTednesday', 'fullThursday', 'fullFriday', 'fullSaturday', 'fullSunday'];
var inWeekDays = ['Воскресенье', 'Понедельник', 'Вторник', 'Среду', 'Четверг', 'Пятницу', 'Субботу'];

var currentTableId = 0;
var currentWindow = 1;
var googleSpreadsheet;
var tableViewer;
var apiObj;
var infoList = [];
var sortedTimeLists = { 'to': [], 'from': [] };
var notificationNumber = 0;

var isLoadedMaps = false;
var isToMapLoaded = false;
var isFromMapLoaded = false;
var isWeekendSplashChecked = false;

//Параметр для включения геолокации
var isGeoLocationOn = true;

//Api key from Google Api Console
var key = "AIzaSyAl9aZAZCbOAYhUl0RH57S9cnAPMnG3LLs";
//spreadsheetId идентификатор таблицы
var spreadsheetId = "10db0NtOmOC5TLw0WBuzFCGtoVa1GaFYDeUqIADh6p1E";

//Параметры для запросов
var ToTecnopolis = "To Technopolis";
var rangeTo = "A:J";

var FromTechnopolis = "From Technopolis";
var rangeFrom = "A:J";

var Info = "Info";
var InfoRange = "A2:B2";

var spesialRange = "I:J";

var isBreakVisible = true;
var refreshIntervalId;
var isPushSupported = true;
var selectedTime;
var iconForPushNotification = 'assets/images/favicon/android-icon-192x192.png';

//global application time
function getCurrentTime() {
    var now = new Date(2018, 6, 5);
    now.setHours(11);
    now.setMinutes(27);
    return now;
}
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Модуль работы с гугл таблицами
 */

$(function googleApi() {

    /**
     * Класс содержащий информацию о google sheets и интерфейс для загрузки данных из неё
     */
    var GoogleSpreadsheet = function () {
        function GoogleSpreadsheet(key, spreadsheetId) {
            _classCallCheck(this, GoogleSpreadsheet);

            this.key = key;
            this.spreadsheetId = spreadsheetId;
        }

        /**
         * Интерфейс для загрузки данных из google sheets
         * @param sheet String
         * @param range String
         * @param fun function
         */


        _createClass(GoogleSpreadsheet, [{
            key: 'load',
            value: function load(sheet, range, fun) {
                var googleUrl = 'https://sheets.googleapis.com/v4/spreadsheets/' + spreadsheetId + '/values/' + sheet + '!' + range + '?key=' + key;
                $.getJSON(googleUrl, fun);
            }
        }]);

        return GoogleSpreadsheet;
    }();

    /**
     * Класс для управления сохранением данных в localStorage, отображения таблицы расписания,
     * вызова события для отображения уведомлений
     */


    var API = function () {
        function API(tableViewer, googleSpreadsheet) {
            _classCallCheck(this, API);

            this.tableViewer = tableViewer;
            this.googleSpreadsheet = googleSpreadsheet;
            if (localStorage.length === 0 || localStorage.getItem(0) == null || localStorage.getItem(1) == null) {
                //Синхронная загрузка данных
                $.ajaxSetup({
                    async: false
                });
                this.saveToLocalStorage();
                $.ajaxSetup({
                    async: true
                });
            } else {
                if (navigator.onLine) {
                    this.saveToLocalStorage();
                    this.updateStorage();
                }
                try {
                    this.showTimetable();
                } catch (err) {
                    console.error("showTimetable: ", err);
                }
            }
        }

        /**
         * Запрашивает с апи гугла таблицу по урлу
         * @param sheet
         * @param range
         * @param {function} fun Что с ней делает
         */


        _createClass(API, [{
            key: 'googleSpreadsheetLoad',
            value: function googleSpreadsheetLoad(sheet, range, fun) {
                this.googleSpreadsheet.load(sheet, range, function (result) {
                    fun(result);
                });
            }

            /**
             * Сохранение расписания в локальное хранилище
             */

        }, {
            key: 'saveToLocalStorage',
            value: function saveToLocalStorage() {
                var _this = this;

                this.googleSpreadsheetLoad(ToTecnopolis, rangeTo, function (result) {
                    localStorage.setItem(0, JSON.stringify(result));
                });
                this.googleSpreadsheetLoad(FromTechnopolis, rangeFrom, function (result) {
                    localStorage.setItem(1, JSON.stringify(result));
                });
                this.googleSpreadsheetLoad(Info, InfoRange, function (result) {
                    localStorage.setItem('info', JSON.stringify(result));
                    _this.tableViewer.addInfoList(result);
                });
                this.showTimetable(currentTableId);
            }

            /**
             * Обновление данных в локальном хранилмще
             */

        }, {
            key: 'updateStorage',
            value: function updateStorage() {
                this.tableViewer.cleanTableList();
                this.saveToLocalStorage();
            }

            /**
             * Отображает расписания, сохраненные в локальном хранилище в таблице
             */

        }, {
            key: 'showTimetable',
            value: function showTimetable() {
                var now = getCurrentTime();
                if (!isWeekendSplashChecked) {
                    if (now.getDay() === 0 || now.getDay() === 6) {
                        $('.js-weekend-splash').show();
                    }
                    isWeekendSplashChecked = true;
                }

                this.tableViewer.addTableList(JSON.parse(localStorage.getItem(0)), 0);
                this.tableViewer.addTableList(JSON.parse(localStorage.getItem(1)), 1);
            }
        }]);

        return API;
    }();

    /**
     * Класс для отображения данных в таблице расписания
     */


    var TableViewer = function () {
        function TableViewer(timetableRowClass) {
            _classCallCheck(this, TableViewer);

            this.timetableRowClass = timetableRowClass;
        }
        /**
         * Добавляет уведомления в infoList и вызывает отображение этого уведомления
         * @param {object}   infoJSON  Обьект
         */


        _createClass(TableViewer, [{
            key: 'addInfoList',
            value: function addInfoList(infoJSON) {
                var notifications = infoJSON.values;
                notifications.shift();
                infoList = notifications;
                this.showNotification();
            }

            /**
             * Отображает уведомление
             */

        }, {
            key: 'showNotification',
            value: function showNotification() {
                if (infoList.length === 0 && localStorage.getItem('info') != null) {
                    if (localStorage.getItem('info') != null) {
                        infoList = JSON.parse(localStorage.getItem('info')).values;
                    } else {
                        infoList = [['', '']];
                    }
                }
                var notification = infoList[notificationNumber];

                if (notification.length > 1 && notification[1].length + notification[0].length > 0) {
                    $("#output_notification").text(notification[1]);
                    $('#notification').show();
                }
            }

            /**
             * Отображает расписание в таблице
             * @param   {object} timetableJSON     Data
             * @param   {number} id                Table list number
             */

        }, {
            key: 'addTableList',
            value: function addTableList(timetableJSON, id) {

                var timetableRowHtmlString = "";

                var timetable = timetableJSON.values;
                var timeSort = {};
                timetable.shift();

                //создаем асоциативный массив где ключ это час, а значение массив минут
                timetable.forEach(function (mins, i) {
                    var _mins$0$split = mins[0].split(':'),
                        _mins$0$split2 = _slicedToArray(_mins$0$split, 2),
                        hour = _mins$0$split2[0],
                        min = _mins$0$split2[1];

                    mins.shift();
                    if (timeSort[hour] === undefined) timeSort[hour] = [];
                    timeSort[hour].push({ min: min, mins: mins });
                });

                function compareMin(a, b) {
                    if (a.min > b.min) return 1;
                    if (a.min < b.min) return -1;
                }

                //сортируем массивы минут

                for (var item in timeSort) {
                    timeSort[item] = timeSort[item].sort(compareMin);
                }

                if (id === 0) sortedTimeLists.to = timeSort;else sortedTimeLists.from = timeSort;

                for (hour in timeSort) {
                    for (index in timeSort[hour]) {
                        if (hour !== "" && timeSort[hour][index].min !== "") {
                            var weekCount = 0;
                            var weekSelect = timeSort[hour][index].mins;
                            for (var i = 0; i < 5; i++) {
                                if (weekSelect.length > i && weekSelect[i].length > 0) weekCount++;
                            }
                            var disableClass = "";
                            var specialInfo = "";
                            if (weekCount < 5) {
                                var now = getCurrentTime();
                                var weekDayNumber = now.getDay();

                                var itIsSuperLongIteratorButInVeryUseful = (weekDayNumber + 6) % 7;
                                if (weekSelect[itIsSuperLongIteratorButInVeryUseful] && weekSelect[itIsSuperLongIteratorButInVeryUseful].length > 0) {
                                    disableClass = 'redline';
                                    specialInfo = "Только сегодня";
                                } else if (weekCount > 0) {
                                    disableClass = "disabled";
                                    specialInfo = "В ";
                                    for (var _i = 0; _i < weekSelect.length; _i++) {
                                        if (weekSelect[_i].length > 0) {
                                            specialInfo += inWeekDays[(_i + 1) % 7] + " ";
                                        }
                                    }
                                }
                            }
                            if (timeSort[hour][index].mins.length > 7 && timeSort[hour][index].mins[7].length > 0) {
                                disableClass = "disabled";
                                specialInfo = "Отменен сегодня";
                            } else if (timeSort[hour][index].mins.length > 8 && timeSort[hour][index].mins[8].length > 0) {
                                disableClass = 'redline';
                                specialInfo = "Только сегодня";
                            }

                            timetableRowHtmlString += '<li class="' + disableClass + '">\n                                                <div class="time">' + hour + ':' + timeSort[hour][index].min + '</div>\n                                                <div class="time-info">\n                                                    <div class="info">' + specialInfo + '</div>\n                                                    <div class="desc"></div>\n                                                </div>\n                                                 </li>';
                        }
                    }
                }

                //Вывод сгенерированной таблицы
                var idTag = this.timetableRowClass + id;
                $(idTag).html(timetableRowHtmlString);
            }
        }, {
            key: 'cleanTableList',
            value: function cleanTableList() {
                $(this.timetableRowClass + currentTableId).html("");
            }
        }]);

        return TableViewer;
    }();

    googleSpreadsheet = new GoogleSpreadsheet(key, spreadsheetId);
    tableViewer = new TableViewer("#scheduleList");
    apiObj = new API(tableViewer, googleSpreadsheet);
});
"use strict";

function changeBreakMod() {
    isBreakVisible = !isBreakVisible;
}
function setMenuActions() {

    var els = $(".timeline > li:not(.break)");
    // Trigger action when the contexmenu is about to be shown
    $(".timeline > li:not(.break)").bind("contextmenu", function (event) {

        // Avoid the real one
        event.preventDefault();

        // Show contextmenu
        // console.log(event.screenY + " : " + event.screenX);
        var dy = event.pageY;
        if (dy + 35 > window.innerHeight) {
            dy = window.innerHeight - 35;
        }
        var dx = event.pageX;
        if (dx + 300 > window.innerWidth) {
            dx = window.innerWidth - 300;
        }
        $(".context-menu").finish().toggle(100).

        // In the right position (the mouse)

        css({
            top: dy + "px",
            left: dx + "px"
        });
        selectedTime = this;
    });

    // If the document is clicked somewhere
    $(".timeline > li:not(.break)").bind("mousedown", function (e) {

        // If the clicked element is not the menu
        if (!$(e.target).parents(".context-menu").length > 0) {

            // Hide it
            $(".context-menu").hide(100);
            selectedTime = undefined;
        }
    });

    // If the menu element is clicked
    $(".context-menu li").click(function () {

        // This is the triggered action name
        switch ($(this).attr("data-action")) {

            // A case for each action. Your actions here
            case "first":
                setPushNotification(selectedTime, 5);break;
            case "second":
                setPushNotification(selectedTime, 10);break;
            // case "second": changeBreakMod();
            //
            //                 if(isBreakVisible){
            //                     $(".context-menu > li[data-action = 'second']").text("Скрыть перерывы");
            //                 }
            //                 else {
            //                     $(".context-menu > li[data-action = 'second']").text("Показать перерывы");
            //                 }
            //
            //                 break;
        }

        // Hide it AFTER the action was triggered

        $(".context-menu").hide(100);
    });
}
"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

/**
 * Модуль работы с датой
 */

// $(function () {
/**
 * Установка текущей даты, поиск следующей даты в таблице, выделение ближайшего рейса, добавление перерыва,
 * отсчёт времени
 */
function getDiffTime(hour, minuts) {
    var res = "";
    if (hour > 0) {
        if (hour < 10) res = "0" + hour;else res = hour;
        res += ' ч ';
    }
    if (minuts < 10) {
        res += "0" + minuts;
    } else {
        res += minuts;
    }
    res += ' мин';
    return res;
}

function addBreaks(list) {

    var breakPoints = [];
    var now = getCurrentTime();

    var time = now.getHours() * 60 + now.getMinutes();
    var disabledClass = "";
    for (var i = 0; i < list.length - 1; i++) {

        if ($(list[i]).hasClass('disabled')) {
            continue;
        }

        var _list$i$children$0$in = list[i].children[0].innerText.split(':'),
            _list$i$children$0$in2 = _slicedToArray(_list$i$children$0$in, 2),
            h1 = _list$i$children$0$in2[0],
            m1 = _list$i$children$0$in2[1];

        while (i + 1 < list.length && $(list[i + 1]).hasClass('disabled')) {
            i++;
        }if (i + 2 > list.length) continue;

        var _list$children$0$inne = list[i + 1].children[0].innerText.split(':'),
            _list$children$0$inne2 = _slicedToArray(_list$children$0$inne, 2),
            h2 = _list$children$0$inne2[0],
            m2 = _list$children$0$inne2[1];

        var start = parseInt(h1) * 60 + parseInt(m1);
        var end = parseInt(h2) * 60 + parseInt(m2);

        var differenceTime = end - start;
        var difH = Math.floor(differenceTime / 60);
        var difM = differenceTime % 60;

        if (differenceTime >= 40 && (start > time || end <= time)) {
            breakPoints.push(list[i]);
            disabledClass = "";
            if (end <= time) {
                disabledClass = 'disabled';
            }
            if (isBreakVisible) {
                $(list[i]).after("<li class=\"break " + disabledClass + "\"><div class=\"time-info\">" + "<div class=\"info\">Перерыв " + getDiffTime(difH, difM) + "</div>" + "<div class=\"desc\"></div></div></li>");
            }
        }
        var difFromNow = end - time;
        var hourDiff = Math.floor(difFromNow / 60);
        var minutsDiff = difFromNow % 60;

        if (differenceTime >= 40 && start <= time && time < end && difFromNow > 10) {
            addActiveBreak(list[i + 1], hourDiff, minutsDiff);
        } else if (differenceTime < 40 && difFromNow > 10 && difFromNow < 40 && time < end && start <= time) {
            list[i + 1].querySelector('.info').innerText = 'Через ' + getDiffTime(hourDiff, minutsDiff);
            list[i + 1].querySelector('.desc').innerHTML = "<a href='javascript:'>Всегда есть другие варианты &#10095;</a>";
            $(list[i + 1]).addClass("anotherVariants");
        }
    }
}

//Вывод активного перерыва
function addActiveBreak(selectedItem, hourDiff, minutsDiff) {
    $(selectedItem).before("<li class=\"break is-active\"><div class=\"time-info\">" + "<div class=\"info\">Перерыв " + getDiffTime(hourDiff, minutsDiff) + "</div>" + "<div class=\"desc\"><a href='javascript:'>Воспользуйтесь общественным транспортом &#10095</a></div></div></li>");
}

//Вывод уведомления по завершению рейсов
function addBussOver(item) {
    $(item).after("<li class=\"break next is-active\"><div class=\"time-info\">" + "<div class=\"info\">Рейсы закончились</div>" + "<div class=\"desc\"><a href='javascript:'>Воспользуйтесь общественным транспортом &#10095</a></div></div></li>");
}

function setDate() {
    //Обновление и очистка таблицы расписания
    apiObj.showTimetable(0);

    var listTo = [].slice.call($("#scheduleList0").get(0).children);
    var listFrom = [].slice.call($("#scheduleList1").get(0).children);

    var selectedItem = listTo[0];
    var index = 0;
    var minDiffFromTime = 90000;
    var time = getCurrentTime();

    var lastLi = listTo.length - 1;
    while (lastLi > 0 && $(listTo[lastLi]).hasClass('disabled')) {
        lastLi--;
    }if (lastLi > 0) {
        $(listTo[lastLi]).addClass('warning');
    }
    lastLi = listFrom.length - 1;
    while (lastLi > 0 && $(listFrom[lastLi]).hasClass('disabled')) {
        lastLi--;
    }if (lastLi > 0) {
        $(listFrom[listFrom.length - 1]).addClass('warning');
    }
    var timeInMins = time.getHours() * 60 + time.getMinutes();

    //Поиск и выделение элемента в таблице к технополису
    for (var i = 0; i < listTo.length; i++) {
        var li = listTo[i];
        var _divTime = li.children[0];
        var _divInfo = li.children[1];

        var _divTime$innerText$sp = _divTime.innerText.split(':'),
            _divTime$innerText$sp2 = _slicedToArray(_divTime$innerText$sp, 2),
            _h = _divTime$innerText$sp2[0],
            _m = _divTime$innerText$sp2[1];

        var hm = parseInt(_h) * 60 + parseInt(_m);

        if (hm > timeInMins && minDiffFromTime > Math.abs(timeInMins - hm) && !$(li).hasClass('disabled')) {
            selectedItem = li;
            index = i;
            minDiffFromTime = Math.abs(timeInMins - hm);
        }
    }

    if (minDiffFromTime === 90000) {
        addBussOver(listTo[listTo.length - 1]);
    }

    var divTime = selectedItem.children[0];
    var divInfo = selectedItem.children[1];

    var _divTime$innerText$sp3 = divTime.innerText.split(':'),
        _divTime$innerText$sp4 = _slicedToArray(_divTime$innerText$sp3, 2),
        h = _divTime$innerText$sp4[0],
        m = _divTime$innerText$sp4[1];

    var hourDiff = Math.floor(minDiffFromTime / 60);
    var minutsDiff = minDiffFromTime % 60;

    if (minDiffFromTime > 5 && minDiffFromTime <= 10) {
        $(selectedItem).addClass("success");
        divInfo.children[0].innerText = 'Через ' + getDiffTime(hourDiff, minutsDiff);
    } else {
        if (minDiffFromTime <= 5) {
            $(selectedItem).addClass("alert");
            divInfo.children[0].innerText = 'Через ' + getDiffTime(hourDiff, minutsDiff);
        }
    }
    if (minDiffFromTime < 90000) {
        $(selectedItem).addClass("next");
    }

    if (index < listTo.length - 1 && ($(selectedItem).hasClass('success') || $(selectedItem).hasClass('alert'))) {
        var nextIndex = index + 1;
        while (nextIndex < listTo.length && $(listTo[nextIndex]).hasClass('disabled')) {
            nextIndex++;
        }if (nextIndex < listTo.length) {
            var nextTime = listTo[nextIndex].children[0];

            var _nextTime$innerText$s = nextTime.innerText.split(':'),
                _nextTime$innerText$s2 = _slicedToArray(_nextTime$innerText$s, 2),
                _h2 = _nextTime$innerText$s2[0],
                _m2 = _nextTime$innerText$s2[1];

            var nextTimeInMinutes = parseInt(_h2) * 60 + parseInt(_m2);
            var difMins = nextTimeInMinutes - timeInMins;
            while (difMins < 0) {
                difMins += 24 * 60;
            }
            var _hourDiff = Math.floor(difMins / 60);
            var _minutsDiff = difMins % 60;

            divInfo.children[1].innerText = "Следующий за ним - через " + getDiffTime(_hourDiff, _minutsDiff);
        }
    }

    if ($(selectedItem).hasClass('warning')) {
        divInfo.children[1].innerHTML = "<a href='javascript:'>Всегда есть другие варианты &#10095;</a>";
        $(selectedItem).addClass("anotherVariants");
    }

    //Поиск и выделение элемента в таблице к метро

    minDiffFromTime = 90000;
    index = 0;
    selectedItem = listFrom[0];
    for (var _i = 0; _i < listFrom.length; _i++) {
        var _li = listFrom[_i];
        var _divTime2 = _li.children[0];

        var _divTime2$innerText$s = _divTime2.innerText.split(':'),
            _divTime2$innerText$s2 = _slicedToArray(_divTime2$innerText$s, 2),
            _h3 = _divTime2$innerText$s2[0],
            _m3 = _divTime2$innerText$s2[1];

        var _hm = parseInt(_h3) * 60 + parseInt(_m3);

        if (_hm > timeInMins && minDiffFromTime > Math.abs(_hm - timeInMins) && !$(_li).hasClass('disabled')) {
            selectedItem = _li;
            index = _i;
            minDiffFromTime = Math.abs(timeInMins - _hm);
        }
    }

    if (minDiffFromTime === 90000) {
        addBussOver(listFrom[listFrom.length - 1]);
    }
    divInfo = selectedItem.children[1];

    hourDiff = Math.floor(minDiffFromTime / 60);
    minutsDiff = minDiffFromTime % 60;

    if (minDiffFromTime <= 5) {
        $(selectedItem).addClass("alert");
        divInfo.children[0].innerText = 'Через ' + getDiffTime(hourDiff, minutsDiff);
    } else {
        if (minDiffFromTime <= 10) {
            $(selectedItem).addClass("success");
            divInfo.children[0].innerText = 'Через ' + getDiffTime(hourDiff, minutsDiff);
        }
    }
    if (minDiffFromTime < 90000) {
        $(selectedItem).addClass("next");
    }

    if (index < listFrom.length - 1 && ($(selectedItem).hasClass('success') || $(selectedItem).hasClass('alert'))) {
        var _nextIndex = index + 1;
        while (_nextIndex < listFrom.length && $(listFrom[_nextIndex]).hasClass('disabled')) {
            _nextIndex++;
        }if (_nextIndex < listFrom.length) {
            var _nextTime = listFrom[_nextIndex].children[0];

            var _nextTime$innerText$s3 = _nextTime.innerText.split(':'),
                _nextTime$innerText$s4 = _slicedToArray(_nextTime$innerText$s3, 2),
                _h4 = _nextTime$innerText$s4[0],
                _m4 = _nextTime$innerText$s4[1];

            var _nextTimeInMinutes = parseInt(_h4) * 60 + parseInt(_m4);
            var _difMins = _nextTimeInMinutes - timeInMins;
            while (_difMins < 0) {
                _difMins += 24 * 60;
            }
            var _hourDiff2 = Math.floor(_difMins / 60);
            var _minutsDiff2 = _difMins % 60;
            divInfo.children[1].innerText = "Следующий за ним - через " + getDiffTime(_hourDiff2, _minutsDiff2);
        }
    }
    if ($(selectedItem).hasClass('warning')) {
        divInfo.children[1].innerHTML = "<a href='javascript:'>Всегда есть другие варианты &#10095;</a>";
        $(selectedItem).addClass("anotherVariants");
    }

    addBreaks(listTo);
    addBreaks(listFrom);

    $('li.break.is-active').click(function () {
        $('#Third_page').trigger('click');
    });
    $('li.anotherVariants').click(function () {
        $('#Third_page').trigger('click');
    });
    setMenuActions();
    checkSavedNotifications();
}
$(function () {

    setDate();
    refreshIntervalId = setInterval(setDate, 30000);
});
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// Device.js
// (c) 2014 Matthew Hudson
// Device.js is freely distributable under the MIT license.
// For all details and documentation:
// http://matthewhudson.me/projects/device.js/

(function () {

  var device, previousDevice, addClass, documentElement, find, handleOrientation, hasClass, orientationEvent, removeClass, userAgent;

  // Save the previous value of the device variable.
  previousDevice = window.device;

  device = {};

  // Add device as a global object.
  window.device = device;

  // The <html> element.
  documentElement = window.document.documentElement;

  // The client user agent string.
  // Lowercase, so we can use the more efficient indexOf(), instead of Regex
  userAgent = window.navigator.userAgent.toLowerCase();

  // Main functions
  // --------------

  device.ios = function () {
    return device.iphone() || device.ipod() || device.ipad();
  };

  device.iphone = function () {
    return !device.windows() && find('iphone');
  };

  device.ipod = function () {
    return find('ipod');
  };

  device.ipad = function () {
    return find('ipad');
  };

  device.android = function () {
    return !device.windows() && find('android');
  };

  device.androidPhone = function () {
    return device.android() && find('mobile');
  };

  device.androidTablet = function () {
    return device.android() && !find('mobile');
  };

  device.blackberry = function () {
    return find('blackberry') || find('bb10') || find('rim');
  };

  device.blackberryPhone = function () {
    return device.blackberry() && !find('tablet');
  };

  device.blackberryTablet = function () {
    return device.blackberry() && find('tablet');
  };

  device.windows = function () {
    return find('windows');
  };

  device.windowsPhone = function () {
    return device.windows() && find('phone');
  };

  device.windowsTablet = function () {
    return device.windows() && find('touch') && !device.windowsPhone();
  };

  device.fxos = function () {
    return (find('(mobile;') || find('(tablet;')) && find('; rv:');
  };

  device.fxosPhone = function () {
    return device.fxos() && find('mobile');
  };

  device.fxosTablet = function () {
    return device.fxos() && find('tablet');
  };

  device.meego = function () {
    return find('meego');
  };

  device.cordova = function () {
    return window.cordova && location.protocol === 'file:';
  };

  device.nodeWebkit = function () {
    return _typeof(window.process) === 'object';
  };

  device.mobile = function () {
    return device.androidPhone() || device.iphone() || device.ipod() || device.windowsPhone() || device.blackberryPhone() || device.fxosPhone() || device.meego();
  };

  device.tablet = function () {
    return device.ipad() || device.androidTablet() || device.blackberryTablet() || device.windowsTablet() || device.fxosTablet();
  };

  device.desktop = function () {
    return !device.tablet() && !device.mobile();
  };

  device.television = function () {
    var i, tvString;

    television = ["googletv", "viera", "smarttv", "internet.tv", "netcast", "nettv", "appletv", "boxee", "kylo", "roku", "dlnadoc", "roku", "pov_tv", "hbbtv", "ce-html"];

    i = 0;
    while (i < television.length) {
      if (find(television[i])) {
        return true;
      }
      i++;
    }
    return false;
  };

  device.portrait = function () {
    return window.innerHeight / window.innerWidth > 1;
  };

  device.landscape = function () {
    return window.innerHeight / window.innerWidth < 1;
  };

  // Public Utility Functions
  // ------------------------

  // Run device.js in noConflict mode,
  // returning the device variable to its previous owner.
  device.noConflict = function () {
    window.device = previousDevice;
    return this;
  };

  // Private Utility Functions
  // -------------------------

  // Simple UA string search
  find = function find(needle) {
    return userAgent.indexOf(needle) !== -1;
  };

  // Check if documentElement already has a given class.
  hasClass = function hasClass(className) {
    var regex;
    regex = new RegExp(className, 'i');
    return documentElement.className.match(regex);
  };

  // Add one or more CSS classes to the <html> element.
  addClass = function addClass(className) {
    var currentClassNames = null;
    if (!hasClass(className)) {
      currentClassNames = documentElement.className.replace(/^\s+|\s+$/g, '');
      documentElement.className = currentClassNames + " " + className;
    }
  };

  // Remove single CSS class from the <html> element.
  removeClass = function removeClass(className) {
    if (hasClass(className)) {
      documentElement.className = documentElement.className.replace(" " + className, "");
    }
  };

  // HTML Element Handling
  // ---------------------

  // Insert the appropriate CSS class based on the _user_agent.

  if (device.ios()) {
    if (device.ipad()) {
      addClass("ios ipad tablet");
    } else if (device.iphone()) {
      addClass("ios iphone mobile");
    } else if (device.ipod()) {
      addClass("ios ipod mobile");
    }
  } else if (device.android()) {
    if (device.androidTablet()) {
      addClass("android tablet");
    } else {
      addClass("android mobile");
    }
  } else if (device.blackberry()) {
    if (device.blackberryTablet()) {
      addClass("blackberry tablet");
    } else {
      addClass("blackberry mobile");
    }
  } else if (device.windows()) {
    if (device.windowsTablet()) {
      addClass("windows tablet");
    } else if (device.windowsPhone()) {
      addClass("windows mobile");
    } else {
      addClass("desktop");
    }
  } else if (device.fxos()) {
    if (device.fxosTablet()) {
      addClass("fxos tablet");
    } else {
      addClass("fxos mobile");
    }
  } else if (device.meego()) {
    addClass("meego mobile");
  } else if (device.nodeWebkit()) {
    addClass("node-webkit");
  } else if (device.television()) {
    addClass("television");
  } else if (device.desktop()) {
    addClass("desktop");
  }

  if (device.cordova()) {
    addClass("cordova");
  }

  // Orientation Handling
  // --------------------

  // Handle device orientation changes.
  handleOrientation = function handleOrientation() {
    if (device.landscape()) {
      removeClass("portrait");
      addClass("landscape");
    } else {
      removeClass("landscape");
      addClass("portrait");
    }
    return;
  };

  // Detect whether device supports orientationchange event,
  // otherwise fall back to the resize event.
  if (Object.prototype.hasOwnProperty.call(window, "onorientationchange")) {
    orientationEvent = "orientationchange";
  } else {
    orientationEvent = "resize";
  }

  // Listen for changes in orientation.
  if (window.addEventListener) {
    window.addEventListener(orientationEvent, handleOrientation, false);
  } else if (window.attachEvent) {
    window.attachEvent(orientationEvent, handleOrientation);
  } else {
    window[orientationEvent] = handleOrientation;
  }

  handleOrientation();

  if (typeof define === 'function' && _typeof(define.amd) === 'object' && define.amd) {
    define(function () {
      return device;
    });
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = device;
  } else {
    window.device = device;
  }
}).call(undefined);
"use strict";

function checkGeoLocation() {
    if (isGeoLocationOn && navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(function (position) {
            var x = position.coords.latitude;
            var y = position.coords.longitude;
            //59.818101, 30.327032 ROI
            //59.854597, 30.320867 Metro
            var x1 = 59.818101; //ROI
            var y1 = 30.327032; //ROI
            var x2 = 59.854597; //Metro
            var y2 = 30.320867; //Metro

            var distanceToRoi = Math.sqrt(Math.pow(Math.abs(x1 - x), 2) + Math.pow(Math.abs(y1 - y), 2));
            var distanceToMetro = Math.sqrt(Math.pow(Math.abs(x2 - x), 2) + Math.pow(Math.abs(y2 - y), 2));

            if (distanceToRoi <= distanceToMetro) {
                currentTableId = 1;
                $("#toMetro").addClass("is-active");
                $("#toTechn").removeClass("is-active");
                $("#timelineDirection").addClass("tube");
                $("#scheduleList0").hide();
                $("#scheduleList1").show();
            } else {
                currentTableId = 0;
                $("#toTechn").addClass("is-active");
                $("#toMetro").removeClass("is-active");
                $("#timelineDirection").removeClass("tube");
                $("#scheduleList1").hide();
                $("#scheduleList0").show();
            }
            if (currentTableId === 0) {
                if ($("#scheduleList0 li.next").length > 0) {
                    $('#timelineDirection').animate({ scrollTop: $("#scheduleList0 li.next").offset().top - $("#scheduleList0").offset().top - 60 });
                }
            } else {
                if ($("#scheduleList1 li.next").length > 0) {
                    $('#timelineDirection').animate({ scrollTop: $("#scheduleList1 li.next").offset().top - $("#scheduleList1").offset().top - 60 });
                }
            }
        });
    } else {
        currentTableId = 0;
        $("#toTechn").addClass("is-active");
        $("#toMetro").removeClass("is-active");
        $("#timelineDirection").removeClass("tube");
        $("#scheduleList1").show();
        $("#scheduleList0").hide();
        $('#timelineDirection').animate({ scrollTop: $("#scheduleList0 li.next").offset().top - $("#scheduleList0").offset().top - 60 });
    }
}
"use strict";

/**
 * Первичная инициализация
 */
$(function () {

    //проверка геопозиции
    checkGeoLocation();

    //showMap();
    //первичное отображение таблицы, в зависимости от заданной стартовой
    if (currentTableId === 0) {
        $("#scheduleList1").hide();
        $("#scheduleList0").show();
    } else {
        $("#scheduleList0").hide();
        $("#scheduleList1").show();
    }

    if (currentTableId === 0) {
        if ($("#scheduleList0 li.next").length > 0) {
            $('#timelineDirection').animate({ scrollTop: $("#scheduleList0 li.next").offset().top - $("#scheduleList0").offset().top - 60 });
        }
    } else {
        if ($("#scheduleList1 li.next").length > 0) {
            $('#timelineDirection').animate({ scrollTop: $("#scheduleList1 li.next").offset().top - $("#scheduleList1").offset().top - 60 });
        }
    }
});
'use strict';

$(function () {
   $('.js-mobile-number').click(function () {
      if (device.mobile() && (device.android() || device.ios())) {
         window.open('tel: +78123180055');
      }
   });
});
'use strict';

/**
 * Модуль карты
 */
//Координаты остановок
var places = {
    metro: [59.854606, 30.320864],
    technopolis: [59.817998, 30.328237],
    tcMetro: [59.824892, 30.323428],
    metroAlt: [59.848758, 30.321244]
};

//Отображение карт
function showMap() {
    if (navigator.onLine) {
        if (currentTableId === 0 && !isToMapLoaded) {
            $('#first_scheme').find('#map0').html('<iframe src="https://yandex.ru/map-widget/v1/?um=constructor%3A55e0e63b17daab5b3dcd5b216d61836c4e09fd41632fa603e14699952d0c4999&amp;source=constructor/" width="100%" height="300" frameborder="0"></iframe>');
            isToMapLoaded = true;
        }
        if (currentTableId === 1 && !isFromMapLoaded) {
            $('#second_scheme').find('#map1').html('<iframe src="https://yandex.ru/map-widget/v1/?um=constructor%3A012d53561df0d3b05b5008c893055936da12d10e84e16681cf71165ceaa517e7&amp;source=constructor/" width="100%" height="300" frameborder="0"></iframe>');
            isFromMapLoaded = true;
        }
    } else {
        if (currentTableId === 0 && !isToMapLoaded) {
            $('#cache-0map').show();
        }
        if (currentTableId === 1 && !isFromMapLoaded) {
            $('#cache-1map').show();
        }
    }
}
$(function () {
    $('.map-link-metro').click(function () {
        if (navigator.onLine) {
            window.open('http://maps.apple.com/?q=' + places.metro[0] + ',' + places.metro[1]);
        }
    });

    $('.map-link-tech').click(function () {
        if (navigator.onLine) {
            window.open('http://maps.apple.com/?q=' + places.technopolis[0] + ',' + places.technopolis[1]);
        }
    });

    $('.map-link-metro-alt').click(function () {
        if (navigator.onLine) {
            window.open('http://maps.apple.com/?q=' + places.metroAlt[0] + ',' + places.metroAlt[1]);
        }
    });
    $('.map-link-tech-tc').click(function () {
        if (navigator.onLine) {
            window.open('http://maps.apple.com/?q=' + places.tcMetro[0] + ',' + places.tcMetro[1]);
        }
    });
});
'use strict';

/**
 * Управление уведомлением
 */
$(function () {

    $('#notification').hide();
    /**
     * Скрытие уведомления
     */
    function hideNotification() {
        $('#notification').hide();
    }

    $('#notification').click(function () {
        hideNotification();
    });
});
'use strict';

/**
 * Модуль установки времени показа заставки
 */
$(function () {
    $('.js-splash').click(function () {
        $('.js-splash').hide();
    });
    // Установка времени показа заставки
    $('.splash').delay(1000).fadeOut("slow");
});
'use strict';

$(function () {

    if (!('serviceWorker' in navigator)) {
        isPushSupported = false;
    }

    if (!('PushManager' in window)) {
        isPushSupported = false;
    }
    // alert(isPushSupported);
    if (localStorage.getItem("pushs") == null) {
        localStorage.setItem("pushs", JSON.stringify([]));
    }
    // createPushNotification("test", iconForPushNotification, "title");
});

function createPushNotification(body, icon, title) {
    if (Notification.permission === "granted") {
        notify(body, icon, title);
    } else {
        Notification.requestPermission(function (permission) {

            if (permission === "granted") {
                notify(body, icon, title);
            }
        });
    }

    function notify(body, icon, title) {
        var notification = new Notification(title, {
            icon: icon,
            body: body
        });

        notification.onclick = function () {
            window.focus();
            notification.close();
        };
    }
}

function checkSavedNotifications() {
    var pushsStr = localStorage.getItem("pushs");
    var pushs = [];
    if (pushsStr) {
        pushs = JSON.parse(pushsStr);
    }
    var checkedPushs = [];
    var time = getCurrentTime();
    var now = time.getHours() * 60 + time.getMinutes();

    for (var i in pushs) {
        var timer = pushs[i]["hh"] * 60 + pushs[i]["mm"];
        var diff = pushs[i]["type"];
        if (timer - now > 0) {

            if (timer - now <= diff) {
                createPushNotification("До рейса в " + pushs[i]["hh"] + ":" + pushs[i]["mm"] + " осталось менее " + diff + " минут", iconForPushNotification, "Внимание!");
            } else {
                checkedPushs.push(pushs[i]);
            }
        }
    }
    localStorage.setItem("pushs", JSON.stringify(checkedPushs));
}

function setPushNotification(object, timeType) {
    var pushsStr = localStorage.getItem("pushs");
    var pushs = [];
    if (pushsStr) {
        pushs = JSON.parse(pushsStr);
    }

    var values = object.innerText.split(":");
    var mm = parseInt(values[1]),
        hh = parseInt(values[0]);
    var p = pushs.find(function (el) {
        return el["hh"] === hh && el["mm"] === mm && el["type"] === timeType;
    });
    if (!p) {
        var struct = { "hh": hh, "mm": mm, "type": timeType };
        pushs.push(struct);
        localStorage.setItem("pushs", JSON.stringify(pushs));
        alert("Напоминание на " + hh + ":" + mm + " установлено");
    } else {
        alert("Напоминание уже установлено");
    }
}
"use strict";
'use strict';

/**
 * Модуль установки событий работы с свичём
 */

function checkMapLoad() {
    if (currentWindow === 2) {
        showMap();
    }
}

$(function () {
    $('#First_page').click(function () {
        currentWindow = 1;
        if (currentTableId === 0) {
            $('#toTechn').trigger('click');
        } else if (currentTableId === 1) {
            $('#toMetro').trigger('click');
        }
    });

    $('#Second_page').click(function () {
        currentWindow = 2;
        checkMapLoad();
    });

    $('#Third_page').click(function () {
        currentWindow = 3;
    });

    $("#toTechn").click(function () {
        currentTableId = 0;
        $("#toTechn").addClass("is-active");
        $("#toMetro").removeClass("is-active");
        $("#timelineDirection").removeClass("tube");

        if (currentWindow === 1) {
            transition1();

            $("#scheduleList1").hide();
            $("#scheduleList0").show();

            if ($("#scheduleList0").find("li.next").length > 0) {
                $('#timelineDirection').animate({ scrollTop: $("#scheduleList0 li.next").offset().top - $("#scheduleList0").offset().top - 60 });
            }
        } else if (currentWindow === 2) {
            transition2();
            checkMapLoad();
        } else if (currentWindow === 3) transition3();
    });

    $("#toMetro").click(function () {
        currentTableId = 1;

        $("#toMetro").addClass("is-active");
        $("#toTechn").removeClass("is-active");
        $("#timelineDirection").addClass("tube");

        if (currentWindow === 1) {
            transition1();

            $("#scheduleList1").show();
            $("#scheduleList0").hide();

            if ($("#scheduleList1").find("li.next").length > 0) {
                $('#timelineDirection').animate({ scrollTop: $("#scheduleList1 li.next").offset().top - $("#scheduleList1").offset().top - 60 });
            }
        } else if (currentWindow === 2) {
            transition2();
            checkMapLoad();
        } else if (currentWindow === 3) transition3();
    });
});
'use strict';

//iframe not loaded in hiding (Firefox), don't use hide on iframe
function transition1() {
    $('#first_alt_ways').hide();
    $('#second_alt_ways').hide();

    $('#first_scheme').css('height', '0');
    $('#second_scheme').css('height', '0');

    $('#timelineDirection').show();

    $('#First_page').addClass('is-active');
    $('#Second_page').removeClass('is-active');
    $('#Third_page').removeClass('is-active');
}

function transition2() {
    $('#timelineDirection').hide();
    $('.third_page').hide();
    $('#first_alt_ways').hide();
    $('#second_alt_ways').hide();

    $('#First_page').removeClass('is-active');
    $('#Second_page').addClass('is-active');
    $('#Third_page').removeClass('is-active');

    if (currentTableId == 0) {
        $('#first_scheme').show();
        $('#first_scheme').css('height', '');
        $('#second_scheme').css('height', '0');
    } else if (currentTableId == 1) {
        $('#second_scheme').show();
        $('#first_scheme').css('height', '0');
        $('#second_scheme').css('height', '');
    }
}

function transition3() {
    $('#timelineDirection').hide();

    $('#first_scheme').css('height', '0');
    $('#second_scheme').css('height', '0');

    $('#First_page').removeClass('is-active');
    $('#Second_page').removeClass('is-active');
    $('#Third_page').addClass('is-active');

    if (currentTableId == 0) {
        $('#first_alt_ways').show();
        $('#second_alt_ways').hide();
    } else if (currentTableId == 1) {
        $('#first_alt_ways').hide();
        $('#second_alt_ways').show();
    }
}
"use strict";
'use strict';

$(function () {

       $('.js-close-weekend-splash').click(function () {
              $('.js-weekend-splash').hide();
              $('#First_page').trigger('click');
       });

       $('.js-open-alt-ways').click(function () {
              $('.js-weekend-splash').hide();
              $('#Third_page').trigger('click');
       });
});